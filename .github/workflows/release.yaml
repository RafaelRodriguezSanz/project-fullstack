name: Release Workflow

on:
  pull_request:
    types:
      - closed
    branches: master
jobs:
  release:
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'master' &&
      startsWith(github.event.pull_request.head.ref, 'release/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: true

      - name: Set up Maven
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Maven clean install
        run: mvn clean install
        working-directory: backend

      - name: Generate Release Notes
        run: |
          # Obtener la versión de la rama de la pull request
          VERSION=$(echo ${{ github.event.pull_request.head.ref }} | grep -oP 'release/\d+\.\d+\.\d+')
      
          # Obtener la lista de commits desde la última versión (o desde el commit inicial si es la primera versión)
          LAST_TAG=$(git describe --tags --abbrev=0)
          COMMIT_MESSAGES=$(git log --pretty=format:"%h %s" $LAST_TAG..HEAD --grep='\:\s' --reverse)
      
          # Inicializar la variable del cuerpo del release
          RELEASE_BODY="## $LAST_TAG...$VERSION\n"
      
          # Iterar sobre los mensajes de commit y agregar al cuerpo del release según la categoría
          while read -r COMMIT; do
            CATEGORY=$(echo "$COMMIT" | grep -oP "^\w+")
            case $CATEGORY in
              "feat") RELEASE_BODY+="\n### Features\n- $COMMIT";;
              "fix") RELEASE_BODY+="\n### Bug Fixes\n- $COMMIT";;
              "doc"|"docs") RELEASE_BODY+="\n### Documentation\n- $COMMIT";;
              "chore") RELEASE_BODY+="\n### Chores\n- $COMMIT";;
              "style") RELEASE_BODY+="\n### Styles\n- $COMMIT";;
              "type") RELEASE_BODY+="\n### Type Fixes\n- $COMMIT";;
              "test") RELEASE_BODY+="\n### Tests\n- $COMMIT";;
              "refactor") RELEASE_BODY+="\n### Refactors\n- $COMMIT";;
              "website") RELEASE_BODY+="\n### Website Changes\n- $COMMIT";;
              "revert") RELEASE_BODY+="\n### Reverts\n- $COMMIT";;
              "clean") RELEASE_BODY+="\n### Cleanups\n- $COMMIT";;
              "perf") RELEASE_BODY+="\n### Performance Improvements\n- $COMMIT";;
              "ci") RELEASE_BODY+="\n### CI/CD\n- $COMMIT";;
              "build") RELEASE_BODY+="\n### Build System\n- $COMMIT";;
            esac
          done <<< "$COMMIT_MESSAGES"
      
          # Añadir el cuerpo del release al archivo de notas de versión
          echo -e "$RELEASE_BODY" >> RELEASE_NOTES.md
      
          # Imprimir las notas de la versión para el registro
          cat RELEASE_NOTES.md  

      - name: Release Version
        run: |
          # Obtener el contenido de RELEASE_NOTES.md
          RELEASE_BODY=$(cat RELEASE_NOTES.md)
          # Configurar el token de acceso personal directamente en los comandos de Git
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git submodule foreach 'git config --local credential.helper "store --file=.git/credentials"'
          git fetch
          git submodule update --init --recursive --remote

          VERSION=$(echo ${{ github.event.pull_request.head.ref }} | grep -oP 'release/\d+\.\d+\.\d+')

          # Crear un tag y generar una versión
          git tag $VERSION
          git push origin $VERSION

          # Crear una release utilizando la API de GitHub
          curl -X POST \
            -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{\"tag_name\":\"$VERSION\",\"name\":\"Release $VERSION\",\"body\":\"Release $RELEASE_BODY\"}"

  deploy:
      runs-on: ubuntu-latest
      if: >
          github.event.pull_request.merged == true &&
          github.event.pull_request.base.ref == 'master' &&
          startsWith(github.event.pull_request.head.ref, 'release/')

      steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.ACCESS_TOKEN }}
            submodules: true

        - name: Set up Maven
          uses: actions/setup-java@v2
          with:
            distribution: 'adopt'
            java-version: '11'
   
        - name: Build JARs
          run: mvn clean install
          working-directory: backend
        
        - name: Inicia servicio Docker
          run: |
            VERSION_NUMBER=$(echo ${{ github.event.pull_request.head.ref }}  | grep -oP '(\d+\.\d+\.\d+)')
            TAG=${VERSION_NUMBER}  docker-compose -f virtualization/docker/docker-compose/docker-compose.yaml -p "proyecto-final" up -d
        
        - name: Build docker image
          run: |
            VERSION_NUMBER=$(echo ${{ github.event.pull_request.head.ref }}  | grep -oP '(\d+\.\d+\.\d+)')
            TAG=${VERSION_NUMBER} docker-compose -f virtualization/docker/docker-compose/docker-compose.yaml -p "proyecto-final"  build --build-arg APP_VERSION=$VERSION_NUMBER
            TAG=latest docker-compose -f virtualization/docker/docker-compose/docker-compose.yaml -p "proyecto-final"  build --build-arg APP_VERSION=$VERSION_NUMBER


        - name: Check docker images
          run: |
            docker images    

        - name: Inicia sesión en Docker Hub
          run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

        - name: Crea versiones de docker
          run: |
            VERSION_NUMBER=$(echo ${{ github.event.pull_request.head.ref }}  | grep -oP '(\d+\.\d+\.\d+)')
            cd virtualization/docker/docker-compose && ls && TAG=${VERSION_NUMBER} docker-compose push && TAG=latest docker-compose push   

          env:
            ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}


        