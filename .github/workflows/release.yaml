name: Release Workflow

on:
  pull_request:
    types:
      - closed

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: true

      - name: Set up Maven
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          
      - name: Maven clean install
        run: mvn clean install
        working-directory: backend

      - name: Maven clean install
        run: mvn clean install
        working-directory: backend

      - name: Maven clean install
        run: mvn clean install
        working-directory: backend

      - name: Maven clean install
        run: mvn clean install
        working-directory: backend

      - name: Maven clean install
        run: mvn clean install
        working-directory: backend

      - name: Release Version
        if: >
          github.event.pull_request.merged == true &&
          github.event.pull_request.base.ref == 'master' &&
          startsWith(github.event.pull_request.head.ref, 'release/')

        run: |
          # Configurar el token de acceso personal directamente en los comandos de Git
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git submodule foreach 'git config --local credential.helper "store --file=.git/credentials"'
          git fetch
          git submodule update --init --recursive --remote

          VERSION=$(echo ${{ github.event.pull_request.head.ref }} | grep -oP 'release/\d+\.\d+\.\d+')
          VERSION_NUMBER=$(echo ${{ github.event.pull_request.head.ref }} | grep -oP 'release/(\d+\.\d+\.\d+)' | cut -d'/' -f 2)


          # Crear un tag y generar una versión
          git tag $VERSION
          git push origin $VERSION

          # Crear una release utilizando la API de GitHub
          curl -X POST \
            -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{\"tag_name\":\"$VERSION\",\"name\":\"Release $VERSION\",\"body\":\"Release $VERSION\"}"

      - name: Inicia servicio Docker
        run: |
          docker-compose -f virtualization/docker/docker-compose/docker-compose.yaml -p "proyecto-final" up -d
      
      - name: Build docker image
        run: |
          docker-compose -f virtualization/docker/docker-compose/docker-compose.yaml -p "proyecto-final"  build --build-arg APP_VERSION=$VERSION

      - name: Inicia sesión en Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Crea versiones de docker
        run: |
          VERSION_NUMBER=$(echo ${{ github.event.pull_request.head.ref }} | grep -oP 'release/(\d+\.\d+\.\d+)' | cut -d'/' -f 2)
          cd virtualization/docker/docker-compose && ls && docker tag proyecto-final:${VERSION_NUMBER} ${{ secrets.DOCKER_USERNAME }}/proyecto-final:${VERSION_NUMBER}
          cd virtualization/docker/docker-compose && ls && docker tag proyecto-final:${VERSION_NUMBER} ${{ secrets.DOCKER_USERNAME }}/proyecto-final:latest
          cd virtualization/docker/docker-compose && ls && docker push ${{ secrets.DOCKER_USERNAME }}/proyecto-final:${VERSION_NUMBER}
          cd virtualization/docker/docker-compose && ls && docker push ${{ secrets.DOCKER_USERNAME }}/proyecto-final:latest      
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
