name: Submodule-Release Workflow

on:
  repository_dispatch:
    types:
      - submodule-release

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Update Submodules
        run: |
          git submodule update --init --recursive

      - name: Release Version

        run: |
          # Configurar el token de acceso personal directamente en los comandos de Git
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          # Extraer la ultima versi贸n
          LAST_VERSION=$(git tag -l 'release/*' --sort=-version:refname | head -n 1)
          # Extraer los componentes de la versi贸n
          IFS='.' read -ra VERSION_PARTS <<< "$LAST_VERSION"
          # Incrementar el tercer componente (parche)
          PATCH_VERSION=$((VERSION_PARTS[2]+1))
          # Formar la nueva versi贸n
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"


          VERSION=$(echo ${{ github.event.pull_request.head.ref }} | grep -oP 'release/\d+\.\d+\.\d+')

          # Crear un tag y generar una versi贸n
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

          # Crear una release utilizando la API de GitHub
          curl -X POST \
            -H "Authorization: token ${{ secrets.ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{\"tag_name\":\"$NEW_VERSION\",\"name\":\"Release $NEW_VERSION\",\"body\":\"Release $NEW_VERSION\"}"

        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
